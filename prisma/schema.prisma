generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  name             String             @db.VarChar(90)
  email            String             @unique @db.VarChar(255)
  cellPhone        String?            @unique @map("cell_phone") @db.VarChar(11)
  password         String
  events           UsersOnEvents[]
  groups           UsersOnGroups[]
  groupPosts       GroupPost[]
  eventPosts       EventPost[]
  CommentGroupPost CommentGroupPost[]
  CommentEventPost CommentEventPost[]
  LikeGroupPost    LikeGroupPost[]
  LikeEventPost    LikeEventPost[]

  @@map("users")
}

model Event {
  id         String          @id @default(uuid())
  date       DateTime        @db.DateTime()
  location   String
  name       String          @db.VarChar(45)
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId String          @map("category_id")
  users      UsersOnEvents[]
  eventPost  EventPost[]

  @@map("events")
}

model Group {
  id         String          @id @default(uuid())
  name       String          @db.VarChar(45)
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId String          @map("category_id")
  users      UsersOnGroups[]
  groupPost  GroupPost[]

  @@map("groups")
}

model GroupPost {
  id               String             @id @default(uuid())
  photo            String?            @db.LongText
  title            String             @db.VarChar(45)
  description      String             @db.VarChar(1024)
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @map("user_id")
  group            Group              @relation(fields: [groupId], references: [id])
  groupId          String             @map("group_id")
  createdAt        DateTime           @default(now())
  CommentGroupPost CommentGroupPost[]
  LikeGroupPost    LikeGroupPost[]

  @@map("group_posts")
}

model EventPost {
  id               String             @id @default(uuid())
  photo            String?            @db.LongText
  title            String             @db.VarChar(45)
  description      String             @db.VarChar(1024)
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @map("user_id")
  event            Event              @relation(fields: [eventId], references: [id])
  eventId          String             @map("event_id")
  createdAt        DateTime           @default(now())
  CommentEventPost CommentEventPost[]
  LikeEventPost    LikeEventPost[]

  @@map("event_posts")
}

model CommentGroupPost {
  id          String    @id @default(uuid())
  text        String    @db.LongText
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  groupPost   GroupPost @relation(fields: [groupPostId], references: [id])
  groupPostId String    @map("group_posts_id")
}

model CommentEventPost {
  id          String    @id @default(uuid())
  text        String    @db.LongText
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  eventPost   EventPost @relation(fields: [eventPostId], references: [id])
  eventPostId String    @map("event_posts_id")
}

model LikeGroupPost {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  groupPost   GroupPost @relation(fields: [groupPostId], references: [id])
  groupPostId String    @map("group_posts_id")
}

model LikeEventPost {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  eventPost   EventPost @relation(fields: [eventPostId], references: [id])
  eventPostId String    @map("event_posts_id")
}

model Category {
  id     String        @id @default(uuid())
  name   String
  type   CATEGORY_TYPE
  events Event[]
  groups Group[]

  @@map("categories")
}

model UsersOnEvents {
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @map("user_id")
  event   Event   @relation(fields: [eventId], references: [id])
  eventId String  @map("event_id")
  owner   Boolean @default(false)

  @@id([userId, eventId])
  @@map("users_on_events")
}

model UsersOnGroups {
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @map("user_id")
  group   Group   @relation(fields: [groupId], references: [id])
  groupId String  @map("group_id")
  owner   Boolean @default(false)

  @@id([userId, groupId])
  @@map("users_on_groups")
}

enum CATEGORY_TYPE {
  EVENTO
  GRUPO
  AMBOS
}
